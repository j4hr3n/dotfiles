# .zshrc

# Documentation
# https://docs.gitlab.com/ce/api/projects.html#list-projects

GITLAB_URL="https://gitlab.com"
GITLAB_GP_GROUP_ID="6620835"
GITLAB_PROJECT_FILE="~/.repositories.json"

# while read repo; do
#     THEPATH=$(echo "$repo" | jq -r ".path")
#     GIT=$(echo "$repo" | jq -r ".git")

#     if [ ! -d "$THEPATH" ]; then
#         echo "Cloning $THEPATH ( $GIT )"
#         git clone "$GIT" --quiet &
#     else
#         echo "Pulling $THEPATH"
#         (cd "$THEPATH" && git pull --quiet) &
#     fi
# done <"$FILENAME"

# wait

gclone() {
  # ensure the file is remove upon exit
  trap "{ rm -f $GITLAB_PROJECT_FILE; }" EXIT

  if [ -z "$GITLAB_PRIVATE_TOKEN" ]; then
    echo "Please set the environment variable GITLAB_PRIVATE_TOKEN"
    echo "See ${GITLAB_URL}/profile/account"
    exit 1
  fi

  GITLAB_GROUP_ID=${1:-${GITLAB_GP_GROUP_ID}} # default https://gitlab.com/ruter-as/sb/grunnplattform

  curl -s --header "PRIVATE-TOKEN: $GITLAB_PRIVATE_TOKEN" "${GITLAB_URL}/api/v4/groups/${GITLAB_GROUP_ID}/projects" |
    jq --raw-output --compact-output ".[]" >$GITLAB_PROJECT_FILE
}

confluentDownload() {
  confluentDir="$HOME/workspace/kafka"

  [[ ! -d confluentDir ]] && mkdir $confluentDir

  minorVersion=$1

  [[ -z "$minorVersion" ]] && { echo "No version set, cannot process. Exiting."; exit 1 }
  [[ "$minorVersion" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || { echo "Invalid version format. Expected x.x.x, was $minorVersion. Exiting."; exit 1 }

  # Remove everything after the second '.'
  patchVersion=$(echo $minorVersion | cut -f1,2 -d'.')

  downloadUrl="http://packages.confluent.io/archive/${patchVersion}/confluent-${minorVersion}.tar.gz"

  echo $downloadUrl

  curl --create-dirs -O --output-dir $confluentDir $downloadUrl

  tar -xzvf "$confluentDir/confluent-${minorVersion}.tar.gz" -C $confluentDir

  find $confluentDir -name "*.tar.gz" -type f -delete 
}

kafkapod() {
  kubectl run -it --tty --rm --restart=Never --image=jorgenringen/kafkacmd kafkacat-ak --overrides='{
    "apiVersion": "v1",
    "kind": "Pod",
    "spec": {
      "containers": [
        {
          "name": "kafkacat-ak",
          "image": "jorgenringen/kafkacmd",
          "env": [
            {
              "name": "BOOTSTRAP",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "pd.services.kafkabroker.v2.socketaddr_set",
                  "name": "tf-state"
                }
              }
            },
            {
              "name": "SCHEMA_REGISTRY_URL",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "pd.services.schemaregistry.v2.endpoint_set",
                  "name": "tf-state"
                }
              }
            }
          ],
          "args": [
            "zsh"
          ],
          "stdin": true,
          "stdinOnce": true,
          "tty": true,
          "resources": {
            "limits": {
              "cpu": "3",
              "memory": "2048Mi"
            },
            "requests": {
              "cpu": "100m",
              "memory": "2048Mi"
            }
          }
        }
      ],
      "restartPolicy": "Never",
      "nodeSelector": {
        "group": "core"
      },
      "tolerations": [
        {
          "key": "group",
          "operator": "Equal",
          "value": "core",
          "effect": "NoSchedule"
        }
      ]
    }
  }' --annotations="ad.datadoghq.com/kafkacat-ak.logs"='[{"source": "stdout","service": "kafkacat-ak","log_processing_rules": [{"type": "exclude_at_match","name": "exclude_pod","pattern" : ".*"}]}]'
}
